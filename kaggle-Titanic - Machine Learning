{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "1daea2db-afec-4ef8-87d4-a7ba8348e991",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "1a46a779-6841-4aad-913f-8a396a49de4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data = pd.read_csv('train.csv')\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "aedf99cf-bb8b-4d77-bffa-15df1fbffb76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name  Sex   Age  SibSp  Parch  \\\n",
       "0                            Braund, Mr. Owen Harris    1  22.0      1      0   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...    0  38.0      1      0   \n",
       "2                             Heikkinen, Miss. Laina    0  26.0      0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)    0  35.0      1      0   \n",
       "4                           Allen, Mr. William Henry    1  35.0      0      0   \n",
       "\n",
       "             Ticket     Fare Cabin  Embarked  \n",
       "0         A/5 21171   7.2500     0       0.0  \n",
       "1          PC 17599  71.2833   C85       1.0  \n",
       "2  STON/O2. 3101282   7.9250     0       0.0  \n",
       "3            113803  53.1000  C123       0.0  \n",
       "4            373450   8.0500     0       0.0  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#preprocess\n",
    "train_data = train_data.replace([\"female\",\"male\"],[0,1])\n",
    "train_data = train_data.replace([\"S\",\"C\",\"Q\"],[0,1,2])\n",
    "train_data = train_data.fillna(0)\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "43e6f653-188a-48ca-808a-5aed411d9ffc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 7)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train = train_data[[\"Survived\"]]\n",
    "X_train = train_data[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]]\n",
    "\n",
    "\n",
    "Y_train = np.array(Y_train)\n",
    "X_train = np.array(X_train)\n",
    "\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "6196166f-d21e-4a45-b0e8-c42007660c33",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.models.Sequential([\n",
    "     tf.keras.layers.Dense(7,activation=\"relu\"),\n",
    "     tf.keras.layers.Dense(128,activation=\"relu\"),\n",
    "     tf.keras.layers.Dense(67,activation=\"relu\"),\n",
    "     tf.keras.layers.Dense(32,activation=\"relu\"),\n",
    "     tf.keras.layers.Dense(2,activation=\"softmax\"),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "3dc54b94-726a-4cff-a47e-1189e9266517",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001, beta_1=0.9, beta_2=0.999, decay=0.01),\n",
    "               loss=tf.keras.losses.sparse_categorical_crossentropy,\n",
    "               metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "77abee49-1657-470a-9817-1112229bc378",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6938 - accuracy: 0.6128\n",
      "Epoch 2/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6440 - accuracy: 0.6195\n",
      "Epoch 3/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6326 - accuracy: 0.6240\n",
      "Epoch 4/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6274 - accuracy: 0.6195\n",
      "Epoch 5/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6238 - accuracy: 0.6251\n",
      "Epoch 6/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6223 - accuracy: 0.6296\n",
      "Epoch 7/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6205 - accuracy: 0.6251\n",
      "Epoch 8/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6189 - accuracy: 0.6330\n",
      "Epoch 9/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6194 - accuracy: 0.6229\n",
      "Epoch 10/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6168 - accuracy: 0.6296\n",
      "Epoch 11/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6161 - accuracy: 0.6274\n",
      "Epoch 12/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6164 - accuracy: 0.6352\n",
      "Epoch 13/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6147 - accuracy: 0.6386\n",
      "Epoch 14/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6139 - accuracy: 0.6364\n",
      "Epoch 15/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6138 - accuracy: 0.6510\n",
      "Epoch 16/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6142 - accuracy: 0.6442\n",
      "Epoch 17/200\n",
      "28/28 [==============================] - 0s 812us/step - loss: 0.6145 - accuracy: 0.6813\n",
      "Epoch 18/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6124 - accuracy: 0.6790\n",
      "Epoch 19/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6122 - accuracy: 0.6779\n",
      "Epoch 20/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6124 - accuracy: 0.6857\n",
      "Epoch 21/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6120 - accuracy: 0.6914\n",
      "Epoch 22/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6114 - accuracy: 0.7003\n",
      "Epoch 23/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6112 - accuracy: 0.6914\n",
      "Epoch 24/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6107 - accuracy: 0.6981\n",
      "Epoch 25/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6107 - accuracy: 0.6925\n",
      "Epoch 26/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6107 - accuracy: 0.6914\n",
      "Epoch 27/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6102 - accuracy: 0.6914\n",
      "Epoch 28/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6101 - accuracy: 0.6902\n",
      "Epoch 29/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6097 - accuracy: 0.6981\n",
      "Epoch 30/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6098 - accuracy: 0.6902\n",
      "Epoch 31/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6097 - accuracy: 0.6891\n",
      "Epoch 32/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6095 - accuracy: 0.6981\n",
      "Epoch 33/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6100 - accuracy: 0.6925\n",
      "Epoch 34/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6094 - accuracy: 0.6970\n",
      "Epoch 35/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6086 - accuracy: 0.6902\n",
      "Epoch 36/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6084 - accuracy: 0.6880\n",
      "Epoch 37/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6081 - accuracy: 0.6902\n",
      "Epoch 38/200\n",
      "28/28 [==============================] - 0s 738us/step - loss: 0.6085 - accuracy: 0.6880\n",
      "Epoch 39/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6079 - accuracy: 0.6902\n",
      "Epoch 40/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6079 - accuracy: 0.7026\n",
      "Epoch 41/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6078 - accuracy: 0.6936\n",
      "Epoch 42/200\n",
      "28/28 [==============================] - 0s 850us/step - loss: 0.6075 - accuracy: 0.6925\n",
      "Epoch 43/200\n",
      "28/28 [==============================] - 0s 738us/step - loss: 0.6074 - accuracy: 0.6914\n",
      "Epoch 44/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6075 - accuracy: 0.6925\n",
      "Epoch 45/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6076 - accuracy: 0.6880\n",
      "Epoch 46/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6068 - accuracy: 0.6869\n",
      "Epoch 47/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6071 - accuracy: 0.6846\n",
      "Epoch 48/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6070 - accuracy: 0.6880\n",
      "Epoch 49/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6066 - accuracy: 0.6835\n",
      "Epoch 50/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6065 - accuracy: 0.6779\n",
      "Epoch 51/200\n",
      "28/28 [==============================] - 0s 775us/step - loss: 0.6064 - accuracy: 0.6779\n",
      "Epoch 52/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6064 - accuracy: 0.6801\n",
      "Epoch 53/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6067 - accuracy: 0.6801\n",
      "Epoch 54/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6062 - accuracy: 0.6801\n",
      "Epoch 55/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6062 - accuracy: 0.6835\n",
      "Epoch 56/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6059 - accuracy: 0.6813\n",
      "Epoch 57/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6059 - accuracy: 0.6824\n",
      "Epoch 58/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6059 - accuracy: 0.6790\n",
      "Epoch 59/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6056 - accuracy: 0.6813\n",
      "Epoch 60/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6057 - accuracy: 0.6824\n",
      "Epoch 61/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6056 - accuracy: 0.6813\n",
      "Epoch 62/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6057 - accuracy: 0.6813\n",
      "Epoch 63/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6057 - accuracy: 0.6835\n",
      "Epoch 64/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6053 - accuracy: 0.6824\n",
      "Epoch 65/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6050 - accuracy: 0.6813\n",
      "Epoch 66/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6050 - accuracy: 0.6824\n",
      "Epoch 67/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6051 - accuracy: 0.6835\n",
      "Epoch 68/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6048 - accuracy: 0.6846\n",
      "Epoch 69/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6048 - accuracy: 0.6846\n",
      "Epoch 70/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6048 - accuracy: 0.6824\n",
      "Epoch 71/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6046 - accuracy: 0.6835\n",
      "Epoch 72/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6045 - accuracy: 0.6835\n",
      "Epoch 73/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6045 - accuracy: 0.6846\n",
      "Epoch 74/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6045 - accuracy: 0.6824\n",
      "Epoch 75/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6045 - accuracy: 0.6824\n",
      "Epoch 76/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6043 - accuracy: 0.6824\n",
      "Epoch 77/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6042 - accuracy: 0.6813\n",
      "Epoch 78/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6041 - accuracy: 0.6824\n",
      "Epoch 79/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6040 - accuracy: 0.6813\n",
      "Epoch 80/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6040 - accuracy: 0.6824\n",
      "Epoch 81/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6039 - accuracy: 0.6824\n",
      "Epoch 82/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6039 - accuracy: 0.6790\n",
      "Epoch 83/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6038 - accuracy: 0.6835\n",
      "Epoch 84/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6036 - accuracy: 0.6824\n",
      "Epoch 85/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6038 - accuracy: 0.6790\n",
      "Epoch 86/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6039 - accuracy: 0.6790\n",
      "Epoch 87/200\n",
      "28/28 [==============================] - 0s 738us/step - loss: 0.6037 - accuracy: 0.6801\n",
      "Epoch 88/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6037 - accuracy: 0.6801\n",
      "Epoch 89/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6033 - accuracy: 0.6801\n",
      "Epoch 90/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6033 - accuracy: 0.6801\n",
      "Epoch 91/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6032 - accuracy: 0.6801\n",
      "Epoch 92/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6032 - accuracy: 0.6801\n",
      "Epoch 93/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6031 - accuracy: 0.6801\n",
      "Epoch 94/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6032 - accuracy: 0.6801\n",
      "Epoch 95/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6029 - accuracy: 0.6790\n",
      "Epoch 96/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6029 - accuracy: 0.6790\n",
      "Epoch 97/200\n",
      "28/28 [==============================] - 0s 775us/step - loss: 0.6029 - accuracy: 0.6790\n",
      "Epoch 98/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6028 - accuracy: 0.6790\n",
      "Epoch 99/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6029 - accuracy: 0.6790\n",
      "Epoch 100/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6029 - accuracy: 0.6813\n",
      "Epoch 101/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6027 - accuracy: 0.6790\n",
      "Epoch 102/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6026 - accuracy: 0.6801\n",
      "Epoch 103/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6027 - accuracy: 0.6813\n",
      "Epoch 104/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6024 - accuracy: 0.6790\n",
      "Epoch 105/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6025 - accuracy: 0.6790\n",
      "Epoch 106/200\n",
      "28/28 [==============================] - 0s 701us/step - loss: 0.6025 - accuracy: 0.6801\n",
      "Epoch 107/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6024 - accuracy: 0.6801\n",
      "Epoch 108/200\n",
      "28/28 [==============================] - 0s 813us/step - loss: 0.6025 - accuracy: 0.6801\n",
      "Epoch 109/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6022 - accuracy: 0.6801\n",
      "Epoch 110/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6022 - accuracy: 0.6801\n",
      "Epoch 111/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6021 - accuracy: 0.6813\n",
      "Epoch 112/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6021 - accuracy: 0.6813\n",
      "Epoch 113/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6020 - accuracy: 0.6813\n",
      "Epoch 114/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6020 - accuracy: 0.6801\n",
      "Epoch 115/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6019 - accuracy: 0.6813\n",
      "Epoch 116/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6018 - accuracy: 0.6813\n",
      "Epoch 117/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6018 - accuracy: 0.6813\n",
      "Epoch 118/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6017 - accuracy: 0.6813\n",
      "Epoch 119/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6017 - accuracy: 0.6813\n",
      "Epoch 120/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6017 - accuracy: 0.6813\n",
      "Epoch 121/200\n",
      "28/28 [==============================] - 0s 738us/step - loss: 0.6017 - accuracy: 0.6813\n",
      "Epoch 122/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6016 - accuracy: 0.6813\n",
      "Epoch 123/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6015 - accuracy: 0.6813\n",
      "Epoch 124/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6015 - accuracy: 0.6813\n",
      "Epoch 125/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6015 - accuracy: 0.6813\n",
      "Epoch 126/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6014 - accuracy: 0.6813\n",
      "Epoch 127/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6013 - accuracy: 0.6813\n",
      "Epoch 128/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6013 - accuracy: 0.6813\n",
      "Epoch 129/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6013 - accuracy: 0.6824\n",
      "Epoch 130/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6012 - accuracy: 0.6813\n",
      "Epoch 131/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6013 - accuracy: 0.6824\n",
      "Epoch 132/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6011 - accuracy: 0.6824\n",
      "Epoch 133/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6011 - accuracy: 0.6824\n",
      "Epoch 134/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6010 - accuracy: 0.6824\n",
      "Epoch 135/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6010 - accuracy: 0.6813\n",
      "Epoch 136/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.6010 - accuracy: 0.6824\n",
      "Epoch 137/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6010 - accuracy: 0.6824\n",
      "Epoch 138/200\n",
      "28/28 [==============================] - 0s 701us/step - loss: 0.6009 - accuracy: 0.6824\n",
      "Epoch 139/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6008 - accuracy: 0.6801\n",
      "Epoch 140/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6008 - accuracy: 0.6801\n",
      "Epoch 141/200\n",
      "28/28 [==============================] - 0s 775us/step - loss: 0.6008 - accuracy: 0.6824\n",
      "Epoch 142/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6009 - accuracy: 0.6790\n",
      "Epoch 143/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6008 - accuracy: 0.6824\n",
      "Epoch 144/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6007 - accuracy: 0.6801\n",
      "Epoch 145/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6006 - accuracy: 0.6824\n",
      "Epoch 146/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6006 - accuracy: 0.6801\n",
      "Epoch 147/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6006 - accuracy: 0.6813\n",
      "Epoch 148/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6005 - accuracy: 0.6801\n",
      "Epoch 149/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6006 - accuracy: 0.6813\n",
      "Epoch 150/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6004 - accuracy: 0.6813\n",
      "Epoch 151/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6005 - accuracy: 0.6824\n",
      "Epoch 152/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6005 - accuracy: 0.6813\n",
      "Epoch 153/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6004 - accuracy: 0.6801\n",
      "Epoch 154/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6002 - accuracy: 0.6801\n",
      "Epoch 155/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6003 - accuracy: 0.6813\n",
      "Epoch 156/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6003 - accuracy: 0.6824\n",
      "Epoch 157/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6002 - accuracy: 0.6813\n",
      "Epoch 158/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6002 - accuracy: 0.6801\n",
      "Epoch 159/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6002 - accuracy: 0.6813\n",
      "Epoch 160/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.6002 - accuracy: 0.6813\n",
      "Epoch 161/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6001 - accuracy: 0.6813\n",
      "Epoch 162/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6000 - accuracy: 0.6813\n",
      "Epoch 163/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6000 - accuracy: 0.6813\n",
      "Epoch 164/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6001 - accuracy: 0.6813\n",
      "Epoch 165/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5999 - accuracy: 0.6813\n",
      "Epoch 166/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.6000 - accuracy: 0.6801\n",
      "Epoch 167/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.6000 - accuracy: 0.6813\n",
      "Epoch 168/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5998 - accuracy: 0.6824\n",
      "Epoch 169/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5998 - accuracy: 0.6813\n",
      "Epoch 170/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5998 - accuracy: 0.6801\n",
      "Epoch 171/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.5997 - accuracy: 0.6813\n",
      "Epoch 172/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5997 - accuracy: 0.6813\n",
      "Epoch 173/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5998 - accuracy: 0.6813\n",
      "Epoch 174/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5997 - accuracy: 0.6801\n",
      "Epoch 175/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5996 - accuracy: 0.6813\n",
      "Epoch 176/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5997 - accuracy: 0.6801\n",
      "Epoch 177/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5996 - accuracy: 0.6813\n",
      "Epoch 178/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5995 - accuracy: 0.6813\n",
      "Epoch 179/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5995 - accuracy: 0.6824\n",
      "Epoch 180/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5994 - accuracy: 0.6813\n",
      "Epoch 181/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5994 - accuracy: 0.6813\n",
      "Epoch 182/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5995 - accuracy: 0.6813\n",
      "Epoch 183/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5994 - accuracy: 0.6801\n",
      "Epoch 184/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5993 - accuracy: 0.6790\n",
      "Epoch 185/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5994 - accuracy: 0.6813\n",
      "Epoch 186/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5994 - accuracy: 0.6801\n",
      "Epoch 187/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.5993 - accuracy: 0.6801\n",
      "Epoch 188/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.5993 - accuracy: 0.6824\n",
      "Epoch 189/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5993 - accuracy: 0.6813\n",
      "Epoch 190/200\n",
      "28/28 [==============================] - 0s 776us/step - loss: 0.5991 - accuracy: 0.6813\n",
      "Epoch 191/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5991 - accuracy: 0.6801\n",
      "Epoch 192/200\n",
      "28/28 [==============================] - 0s 665us/step - loss: 0.5992 - accuracy: 0.6813\n",
      "Epoch 193/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5992 - accuracy: 0.6790\n",
      "Epoch 194/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5990 - accuracy: 0.6801\n",
      "Epoch 195/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.5990 - accuracy: 0.6790\n",
      "Epoch 196/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5989 - accuracy: 0.6801\n",
      "Epoch 197/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5989 - accuracy: 0.6801\n",
      "Epoch 198/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5989 - accuracy: 0.6813\n",
      "Epoch 199/200\n",
      "28/28 [==============================] - 0s 739us/step - loss: 0.5989 - accuracy: 0.6813\n",
      "Epoch 200/200\n",
      "28/28 [==============================] - 0s 702us/step - loss: 0.5988 - accuracy: 0.6801\n"
     ]
    }
   ],
   "source": [
    "output = model.fit(X_train,Y_train ,epochs=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "a12e5b69-c5e3-4c24-b721-e436b4db461b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1741da35f40>]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(output.history['loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "60fcec19-9ca3-4dbe-96b1-7111c5fb633d",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = pd.read_csv('test.csv')\n",
    "test_data_target = pd.read_csv('gender_submission.csv')\n",
    "\n",
    "test_data = test_data.replace([\"female\",\"male\"],[0,1])\n",
    "test_data = test_data.replace([\"S\",\"C\",\"Q\"],[0,1,2])\n",
    "test_data = test_data.fillna(0)\n",
    "\n",
    "Y_test = test_data_target[[\"Survived\"]]\n",
    "X_test = test_data[[\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]]\n",
    "\n",
    "\n",
    "Y_test = np.array(Y_test)\n",
    "X_test = np.array(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "f665694f-a933-4af9-824b-10a3f52fb42c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14/14 [==============================] - 0s 614us/step - loss: 0.6229 - accuracy: 0.6483\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.6228935122489929, 0.6483253836631775]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "773ba546-85b2-4109-98c1-3d3fcbe58c06",
   "metadata": {},
   "outputs": [],
   "source": [
    "class KNearestNeighbors:\n",
    "    def __init__(self, k):\n",
    "        self.k = k\n",
    "        \n",
    "    def fit(self, X_train, Y_train):\n",
    "        self.X_train = X_train\n",
    "        self.Y_train = Y_train\n",
    "        self.number_class = len(np.unique(Y_train))\n",
    "        \n",
    "    def nearestNeighbors(self, X_test):\n",
    "        distance = np.sqrt(np.sum((X_test - self.X_train)**2, axis = 1))\n",
    "        near_neighbor = np.argsort(distance)[0:self.k]\n",
    "        return near_neighbor\n",
    "    \n",
    "    def predict(self, X_test):\n",
    "        self.X_test = X_test\n",
    "        y_predict=[]\n",
    "        for i, test in enumerate(self.X_test):\n",
    "            near_neighbor = self.nearestNeighbors(test)\n",
    "            y_predict.append([np.argmax(np.bincount(self.Y_train[near_neighbor]))])\n",
    "        return y_predict\n",
    "    \n",
    "    def evaluate(self, X_test, Y_test):\n",
    "        self.X_test = X_test\n",
    "        self.Y_test = Y_test\n",
    "        y_predict=self.predict(self.X_test)\n",
    "        evaluatation = (y_predict == self.Y_test).sum()/len(self.Y_test)\n",
    "        return evaluatation, y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0fc56b27-15d8-4317-88f1-dad18987045a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Accuracy of KNearestNeighbors classifier is 0.6555023923444976\n"
     ]
    }
   ],
   "source": [
    "Y_train = Y_train.reshape(-1,)\n",
    "knn = KNearestNeighbors(k=5)\n",
    "knn.fit(X_train,Y_train)\n",
    "knn_prediction = knn.predict(X_test)\n",
    "evaluatation,prediction = knn.evaluate(X_test,Y_test)\n",
    "print('The Accuracy of KNearestNeighbors classifier is',evaluatation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "91eef6a1-3666-4382-a1dd-943922d466a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "class AdalineClassifier:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "    \n",
    "    def fit(self, X_train, Y_train):\n",
    "        self.w = np.matmul(inv(np.matmul(X_train.T, X_train)), np.matmul(X_train.T, Y_train))\n",
    "        \n",
    "    def predict(self, X_test):\n",
    "        Y_predic = np.matmul(X_test, self.w)\n",
    "        return Y_predic\n",
    "    \n",
    "    def evaluate(self, X_test, Y_test):\n",
    "        self.X_test = X_test\n",
    "        self.Y_test = Y_test\n",
    "        Y_predic = np.matmul(self.X_test, self.w)\n",
    "        predic = []\n",
    "        for i, pred in enumerate(Y_predic):\n",
    "            if pred > 0.5:\n",
    "                predic.append([1])\n",
    "            elif pred < 0.5:\n",
    "                predic.append([0])\n",
    "        evaluatation = ((predic == self.Y_test).sum())/len(self.Y_test)\n",
    "        return evaluatation, predic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "b35f6e00-360d-473e-9e07-d1cefbaa4af8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Accuracy of AdalineClassifier is 0.8971291866028708\n"
     ]
    }
   ],
   "source": [
    "from numpy.linalg import inv\n",
    "model = AdalineClassifier()\n",
    "model.fit(X_train, Y_train)\n",
    "y_predic = model.predict(X_test)\n",
    "evaluatation, prediction = model.evaluate(X_test, Y_test)\n",
    "print('The Accuracy of AdalineClassifier is', evaluatation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "b904288f-6fea-49bb-929f-0a1bf7976083",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "class Percepton:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def fit(self, X_train, Y_train):\n",
    "        self.X_train = X_train\n",
    "        self.Y_train = Y_train\n",
    "        self.number_class = len(np.unique(Y_train))\n",
    "        x_range = np.arange(self.X_train[:, 0].min(), self.X_train[:, 0].max(), 0.01)\n",
    "        y_range = np.arange(self.X_train[:, 1].min(), self.X_train[:, 1].max(), 0.01)\n",
    "        x, y = np.meshgrid(x_range, y_range)\n",
    "\n",
    "        lr = 0.001\n",
    "        self.w = np.random.rand(7, 1)\n",
    "        self.b = np.random.rand(1, 1)\n",
    "        self.Error = []\n",
    "        for i in range(self.X_train.shape[0]):\n",
    "            y_pred = np.matmul(self.X_train[i], self.w) + self.b\n",
    "            e = self.Y_train[i] - y_pred\n",
    "            a = lr * self.X_train[i, :].T * e\n",
    "            \n",
    "            self.w += a.T\n",
    "            self.b += lr * e\n",
    "\n",
    "            Y_pred = np.matmul(self.X_train, self.w) + self.b\n",
    "            error = np.mean(np.abs(self.Y_train - Y_pred))\n",
    "            self.Error.append(error)\n",
    "\n",
    "        return self.Error, self.w, self.b\n",
    "\n",
    "    def predict(self, X_test):\n",
    "        Y_pred = np.matmul(X_test, self.w) + self.b\n",
    "        predic = []\n",
    "        for i, pred in enumerate(Y_pred):\n",
    "            if pred > 0.5:\n",
    "                predic.append([1])\n",
    "            elif pred < 0.5:\n",
    "                predic.append([0])\n",
    "        return predic\n",
    "\n",
    "    def evaluate(self, X_test, Y_test):\n",
    "        Y_pred = np.matmul(X_test, self.w) + self.b\n",
    "        predic = []\n",
    "        for i, pred in enumerate(Y_pred):\n",
    "            if pred > 0.5:\n",
    "                predic.append([1])\n",
    "            elif pred < 0.5:\n",
    "                predic.append([0])\n",
    "        accuracy = (predic == Y_test).sum() / len(Y_test)\n",
    "        error = np.mean(np.abs(Y_test - predic))\n",
    "        return error, accuracy\n",
    "\n",
    "    def pltlost(self):\n",
    "        x = np.arange(0, self.X_train.shape[0])\n",
    "        plt.plot(x, self.Error, marker='o')\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "43df74d6-3d38-4474-8c27-7c69df235200",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Data Evaluation:  0.4276094276094276 Test Data Accuracy:  0.5723905723905723\n",
      "Test Data Evaluation:  0.3803827751196172 Test Data Accuracy:  0.6196172248803827\n"
     ]
    }
   ],
   "source": [
    "Y_train = np.array(Y_train)\n",
    "Y_train = Y_train.reshape(-1,1)\n",
    "p = Percepton()\n",
    "Error, w, b = p.fit(X_train, Y_train)\n",
    "EvalTest, Accuracy = p.evaluate(X_train, Y_train)\n",
    "print('Test Data Evaluation: ', EvalTest, 'Test Data Accuracy: ', Accuracy)\n",
    "EvalTest, Accuracy = p.evaluate(X_test, Y_test)\n",
    "print('Test Data Evaluation: ', EvalTest, 'Test Data Accuracy: ', Accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "4d38b983-d370-4729-bf94-75820bd786f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1741ec16a60>]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(output.history['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "78c09fb6-1afd-4bfd-b125-1f0b79a6bc25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1741fe4b580>]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(output.history['loss'])\n",
    "plt.plot(output.history['accuracy'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
